// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

///
/// Number.
///
@function number($value) {
    @if meta.type-of($value) == "number" {
        @return $value;
    } @else if meta.type-of($value) != "string" {
        @error "Invalid string type for `#{$value}` value. Use string type instead.";
    }

    $numbers: (
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9
    );

    @return map.get($numbers, $value);
}

///
/// Replace.
///
@function replace($string, $search, $replace: "") {
    $index: string.index($string, $search);

    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + replace(str-slice($string, $index + string.length($search)), $search, $replace);
    }

    @return $string;
}

///
/// @example - scss
///   .foo {
///     margin: css.unpack(10px);
///   }
///
/// @example - css
///   .foo {
///     margin: 10px 10px 10px 10px;
///   }
///
/// @example - scss
///   .foo {
///     margin: css.unpack(10px 5px);
///   }
///
/// @example - css
///   .foo {
///     margin: 10px 5px 10px 5px;
///   }
///
/// @example - scss
///   .foo {
///     margin: css.unpack(10px 5px 12px);
///   }
///
/// @example - css
///   .foo {
///     margin: 10px 5px 12px 5px;
///   }
///
/// @example - scss
///   .foo {
///     margin: css.unpack(10px 5px 12px 0);
///   }
///
/// @example - css
///   .foo {
///     margin: 10px 5px 12px 0;
///   }
///
@function unpack($value) {
    @if meta.type-of($value) == "map" or list.length($value) == 1 {
        @return $value $value $value $value;
    } @else if list.length($value) == 2 {
        @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 1) list.nth($value, 2);
    } @else if list.length($value) == 3 {
        @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 3) list.nth($value, 2);
    } @else if list.length($value) == 4 {
        @return $value;
    }

    @error "Invalid CSS property value: '#{$value}' is more than 4 values";
}
