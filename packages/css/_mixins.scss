// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:meta";
@use "sass:string";
@use "./functions";

///
/// @example - scss
///   .foo {
///     @include selector(md) {
///       background: darkcyan;
///     }
///   }
///
/// @example - css
///   .md:foo {
///     background: darkcyan;
///   }
///
/// @example - scss
///   .foo {
///     @include selector(md, $suffix: true) {
///       background: darkcyan;
///     }
///   }
///
/// @example - css
///   .foo:md {
///     background: darkcyan;
///   }
///
/// @see {function} functions.number
/// @see {function} functions.replace
///
/// @link https://sparkbox.com/foundry/responsive_class_suffixes_automating_classes_with_sass_mixins_and_sass_maps
///
@mixin selector($selector, $key, $divider: ":", $suffix: false) {
    $is-class: string.slice($selector, 1, $end-at: 1);
    $divider: string.unquote($divider);

    @if $is-class != "." {
        @error "Invalid `#{$selector}` selector. Choose a class selector instead.";
    } @else {
        $selector: string.slice($selector, 2);
    }

    @if meta.type-of(functions.number(string.slice($key, 1, $end-at: 1))) == "number" {
        $key: functions.replace(\3 #{string.unquote($key)}, " ");
    }

    @if $suffix {
        .#{$selector}#{string.unquote("\\") + $divider}#{$key} {
            @content;
        }
    } @else {
        .#{$key}#{string.unquote("\\") + $divider}#{$selector} {
            @content;
        }
    }
}

///
/// @example - scss
///   .foo {
///     @include declaration(color, darkcyan);
///     @include declaration(color, darkseagreen, true);
///     @include declaration(box-shadow, (0 0 10px 5px rgba(darkcyan, 0.75), inset 0 0 10px 5px rgba(darkcyan, 0.75)));
///   }
///
/// @example - css
///   .foo {
///     color: darkcyan;
///     color: darkseagreen !important;
///     box-shadow: 0 0 10px 5px rgba(darkcyan, 0.75), inset 0 0 10px 5px rgba(darkcyan, 0.75);
///   }
///
@mixin declaration($property, $value, $important: false) {
    $is-important: if($important, "!important", "");

    #{$property}: $value #{$is-important};
}
