// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:map";
@use "sass:string";
@use "./functions";
@use "./variables";

///
/// @example - scss
///   .foo {
///     @include up(lg) {
///       color: darkcyan;
///     }
///   }
///
/// @example - css
///   @media (min-width: 960px) {
///     .foo {
///       color: darkcyan;
///     }
///   }
///
/// @see {mixin} breakpoint.up
///
@mixin up($value) {
    @if $value and not map.has-key(variables.$styles, $value) {
        @error "Invalid style, `#{$value}` doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    }

    $min: functions.set-min($value);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

///
/// @example - scss
///   .foo {
///     @include down(lg) {
///       color: darkcyan;
///     }
///   }
///
/// @example - css
///   @media (max-width: 960px) {
///     .foo {
///       color: darkcyan;
///     }
///   }
///
/// @see {mixin} breakpoint.down
///
@mixin down($value) {
    @if $value and not map.has-key(variables.$styles, $value) {
        @error "Invalid style, `#{$value}` doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    }

    $max: functions.set-max($value);

    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

///
/// @example - scss
///   .foo {
///     @include only(lg) {
///       color: darkcyan;
///     }
///   }
///
/// @example - css
///   @media (min-width: 960px) and (max-width: 1199px) {
///     .foo {
///       color: darkcyan;
///     }
///   }
///
/// @see {mixin} breakpoint.only
///
@mixin only($value) {
    @if $value and not map.has-key(variables.$styles, $value) {
        @error "Invalid style, `#{$value}` doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    }

    $min: functions.set-min($value);
    $next: functions.get-next($value);
    $max: functions.set-max($next);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    } @else if $max == null {
        @include up($value) {
            @content;
        }
    }
}

///
/// @example - scss
///   .foo {
///     @include between(md, xl) {
///       color: darkcyan;
///     }
///   }
///
/// @example - css
///   @media (min-width: 768px) and (max-width: 1199px) {
///     .foo {
///       color: darkcyan;
///     }
///   }
///
/// @see {mixin} breakpoint.between
///
@mixin between($min, $max) {
    @if $min and not map.has-key(variables.$styles, $min) {
        @error "Invalid style, `#{$min}` doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    } @else if $max and not map.has-key(variables.$styles, $max) {
        @error "Invalid style, `#{$max}` doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    }

    $min: functions.set-min($min);
    $max: functions.set-max($max);

    @if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }
}
