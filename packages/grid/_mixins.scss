// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:meta";
@use "@sass-collective/breakpoint";
@use "@sass-collective/css";
@use "./variables";

@mixin core-styles {
    .grid {
        @include styles;
    }

    .col {
        @include columns-styles;
    }

    .row {
        @include rows-styles;
    }
}

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

@mixin _auto-suffix {
    &-auto {
        @content;
    }
}

@mixin _start-auto-suffix {
    &-start {
        @include _auto-suffix {
            @content;
        }
    }
}

@mixin _start-for($mixin, $limit) {
    @for $i from 1 through $limit + 1 {
        &-start-#{$i} {
            @if ($mixin == "column") {
                @include _column-start($i);
            }

            @if ($mixin == "row") {
                @include _row-start($i);
            }
        }
    }
}

@mixin _end-auto-suffix {
    &-end {
        @include _auto-suffix {
            @content;
        }
    }
}

@mixin _end-for($mixin, $limit) {
    @for $i from 1 through $limit + 1 {
        &-end-#{$i} {
            @if ($mixin == "column") {
                @include _column-end($i);
            }

            @if ($mixin == "row") {
                @include _row-end($i);
            }
        }
    }
}

@mixin _span-full-suffix {
    &-span-full {
        @content;
    }
}

@mixin _span-for($mixin, $limit) {
    @for $i from 1 through $limit {
        &-span-#{$i} {
            @if ($mixin == "column") {
                @include _column-span($i);
            }

            @if ($mixin == "row") {
                @include _row-span($i);
            }
        }
    }
}

@mixin _columns($size) {
    grid-template-columns: repeat($size, minmax(0, 1fr));
}

@mixin _column-span($value) {
    @if meta.type-of($value) != "number" {
        @if $value == "full" {
            grid-column: 1 / -1;
        } @else {
            grid-column: $value;
        }
    } @else {
        grid-column: span $value / span $value;
    }
}

@mixin _column-start($value) {
    grid-column-start: $value;
}

@mixin _column-end($value) {
    grid-column-end: $value;
}

@mixin _rows($size) {
    grid-template-rows: repeat($size, minmax(0, 1fr));
}

@mixin _row-span($value) {
    @if meta.type-of($value) != "number" {
        @if $value == "full" {
            grid-row: 1 / -1;
        } @else {
            grid-row: $value;
        }
    } @else {
        grid-row: span $value / span $value;
    }
}

@mixin _row-start($value) {
    grid-row-start: $value;
}

@mixin _row-end($value) {
    grid-row-end: $value;
}

@mixin _auto-flow($value, $dense: false) {
    $is-dense: if($dense, "dense", "");

    grid-auto-flow: $value #{$is-dense};
}

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin column-gap($size: variables.$column-gap) {
    column-gap: $size;
}

@mixin column-span($value: null) {
    @include _column-span($value);
}

@mixin column-start($value: null) {
    @include _column-start($value);
}

@mixin column-end($value: null) {
    @include _column-end($value);
}

@mixin row-gap($size: variables.$row-gap) {
    row-gap: $size;
}

@mixin row-span($value: null) {
    @include _row-span($value);
}

@mixin row-start($value: null) {
    @include _row-start($value);
}

@mixin row-end($value: null) {
    @include _row-end($value);
}

@mixin styles($columns: variables.$columns, $rows: variables.$rows, $column-gap: variables.$column-gap, $row-gap: variables.$row-gap) {
    display: grid;

    // --------------------------------- //
    // Auto flow
    // --------------------------------- //

    &-flow-col {
        @include _auto-flow(column);
    }

    &-flow-col-dense {
        @include _auto-flow(column, true);
    }

    &-flow-row {
        @include _auto-flow(row);
    }

    &-flow-row-dense {
        @include _auto-flow(row, true);
    }

    // --------------------------------- //
    // Columns
    // --------------------------------- //

    @for $i from 1 through $columns {
        &-cols-#{$i} {
            @include _columns($i);
        }
    }

    // --------------------------------- //
    // Rows
    // --------------------------------- //

    @for $i from 1 through $rows {
        &-rows-#{$i} {
            @include _rows($i);
        }
    }

    // --------------------------------- //
    // Gaps
    // --------------------------------- //

    @include column-gap($column-gap);
    @include row-gap($column-gap);

    @each $key, $value in breakpoint.$screens {
        @at-root {
            @include breakpoint.up($key) {
                @include css.selector(".grid-flow-col", $key) {
                    @include _auto-flow(column);
                }

                @include css.selector(".grid-flow-col-dense", $key) {
                    @include _auto-flow(column, true);
                }

                @include css.selector(".grid-flow-row", $key) {
                    @include _auto-flow(row);
                }

                @include css.selector(".grid-flow-row-dense", $key) {
                    @include _auto-flow(row, true);
                }

                @for $i from 1 through $columns {
                    @include css.selector(".grid-cols-#{$i}", $key) {
                        @include _columns($i);
                    }
                }

                @for $i from 1 through $rows {
                    @include css.selector(".grid-rows-#{$i}", $key) {
                        @include _rows($i);
                    }
                }
            }
        }
    }
}

@mixin columns-styles {

    // --------------------------------- //
    // Span
    // --------------------------------- //

    @include _auto-suffix {
        @include column-span(auto);
    }

    @include _span-for(column, variables.$columns);

    @include _span-full-suffix {
        @include column-span(full);
    }

    // --------------------------------- //
    // Start
    // --------------------------------- //

    @include _start-for(column, variables.$columns);

    @include _start-auto-suffix {
        @include column-start(auto);
    }

    // --------------------------------- //
    // End
    // --------------------------------- //

    @include _end-for(column, variables.$columns);

    @include _end-auto-suffix {
        @include column-end(auto);
    }

    // --------------------------------- //
    // Breakpoint
    // --------------------------------- //

    @each $key, $value in breakpoint.$screens {
        @at-root {
            @include breakpoint.up($key) {
                @include css.selector(".col-auto", $key) {
                    @include column-span(auto);
                }

                @for $i from 1 through variables.$columns {
                    @include css.selector(".col-span-#{$i}", $key) {
                        @include _column-span($i);
                    }
                }

                @include css.selector(".col-span-full", $key) {
                    @include column-span(full);
                }

                @for $i from 1 through variables.$columns + 1 {
                    @include css.selector(".col-start-#{$i}", $key) {
                        @include _column-start($i);
                    }
                }

                @include css.selector(".col-start-auto", $key) {
                    @include column-start(auto);
                }

                @for $i from 1 through variables.$columns + 1 {
                    @include css.selector(".col-end-#{$i}", $key) {
                        @include _column-end($i);
                    }
                }

                @include css.selector(".col-end-auto", $key) {
                    @include column-end(auto);
                }
            }
        }
    }
}

@mixin rows-styles {

    // --------------------------------- //
    // Span
    // --------------------------------- //

    @include _auto-suffix {
        @include row-span(auto);
    }

    @include _span-for(row, variables.$rows);

    @include _span-full-suffix {
        @include row-span(full);
    }

    // --------------------------------- //
    // Start
    // --------------------------------- //

    @include _start-for(row, variables.$rows);

    @include _start-auto-suffix {
        @include row-start(auto);
    }

    // --------------------------------- //
    // End
    // --------------------------------- //

    @include _end-for(row, variables.$rows);

    @include _end-auto-suffix {
        @include row-end(auto);
    }

    // --------------------------------- //
    // Breakpoint
    // --------------------------------- //

    @each $key, $value in breakpoint.$screens {
        @at-root {
            @include breakpoint.up($key) {
                @include css.selector(".row-auto", $key) {
                    @include row-span(auto);
                }

                @for $i from 1 through variables.$rows {
                    @include css.selector(".row-span-#{$i}", $key) {
                        @include _row-span($i);
                    }
                }

                @include css.selector(".row-span-full", $key) {
                    @include _row-span(full);
                }

                @for $i from 1 through variables.$rows + 1 {
                    @include css.selector(".row-start-#{$i}", $key) {
                        @include _row-start($i);
                    }
                }

                @include css.selector(".row-start-auto", $key) {
                    @include _row-start(auto);
                }

                @for $i from 1 through variables.$rows + 1 {
                    @include css.selector(".row-end-#{$i}", $key) {
                        @include _row-end($i);
                    }
                }

                @include css.selector(".row-end-auto", $key) {
                    @include column-end(auto);
                }
            }
        }
    }
}
